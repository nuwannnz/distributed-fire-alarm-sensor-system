/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fire.alarm.emulator;

import firealarm.rmi.api.FireAlarmSensor;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import javax.json.*;

/**
 * This class represents the main emulator window
 *
 * @author nuwan
 */
public class EmulatorWindow extends javax.swing.JFrame implements Runnable {

    private final static String FIRE_ALARM_URL = "http://localhost:5000/fire-alarms";

    private List<FireAlarmSensor> alarmList;
    private FireAlarmSensor selectedSensor = null;

    /**
     * Creates new form EmulatorWindow
     */
    public EmulatorWindow() {
        // init UI
        initComponents();
        // load fire alarms from the REST API
        loadFireAlarms();
    }

    private void loadFireAlarms() {
        StringBuffer res = null;
        try {
            res = APIHelper.get(FIRE_ALARM_URL);
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (res == null) {
            return;
        }

        // parse the response
        JsonArray jo = JsonHelper.getJsonArrayFromString(res.toString());

        // get fire alarm sensor objects from json
        alarmList = jo.stream().map(alarmJson -> {

            return JsonHelper.getFireAlamSensorFromJson((JsonObject) alarmJson);

        }).collect(Collectors.toList());

        // populate the comobobox with fire alarm names
        populateComboBox();

    }

    /**
     * This function will refresh the comobo box items with the floor and room
     * number of each fire alarm
     */
    private void populateComboBox() {
        // clear combo box
        sensorCombo.removeAllItems();
        // add items
        for (FireAlarmSensor fireAlarmSensor : alarmList) {
            sensorCombo.addItem(fireAlarmSensor.getFloor() + " floor " + fireAlarmSensor.getRoom() + " room");

        }
    }

    /**
     * This method will populate the labels and the sliders with the values of
     * the selected fire alarm
     */
    private void populateEmulatePanel() {
        if (selectedSensor == null) {
            return;
        }

        alarmNameLabel.setText(selectedSensor.getFloor() + " floor " + selectedSensor.getRoom() + " room");
        if (selectedSensor.getIsActive()) {
            activeStatusBtn.setText("Turn off");
            activeStatusLabel.setText("ON");
        } else {
            activeStatusBtn.setText("Turn on");
            activeStatusLabel.setText("OFF");
        }
        activeStatusBtn.setSelected(selectedSensor.getIsActive());
        co2Slider.setValue(selectedSensor.getCo2Level());
        smokeSlider.setValue(selectedSensor.getSmokeLevel());
    }

    /**
     * This method will schedule the fetching of the fire alarms
     */
    private void scheduleStatusUpdate() {

        // schedule fetching of sensors to run every 30 seconds
        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(this, 0, 5, TimeUnit.SECONDS);
    }

    /**
     * This method will send the updated status of the selected fire alarm to
     * the REST API
     */
    private void updateStatus() {

        // get values from the slider
        int co2Level = co2Slider.getValue();
        int smokeLevel = smokeSlider.getValue();

        // make levels zero if the alarm is not active
        if (!selectedSensor.getIsActive()) {
            co2Level = 0;
            smokeLevel = 0;
        }

        // build a JSON object with the values
        JsonObject updateFireAlarmParams = Json.createObjectBuilder()
                .add("is_active", selectedSensor.getIsActive())
                .add("smoke_level", smokeLevel)
                .add("co2_level", co2Level)
                .build();

        try {
            // send the update request
            APIHelper.patch(
                    FIRE_ALARM_URL + "/" + selectedSensor.getId(),
                    updateFireAlarmParams);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPain = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sensorCombo = new javax.swing.JComboBox<>();
        emulateBtn = new javax.swing.JButton();
        alarmPane = new javax.swing.JPanel();
        co2Slider = new javax.swing.JSlider();
        alarmNameLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        smokeSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        activeStatusBtn = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        activeStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Select a fire alarm to emulate");
        jLabel1.setAlignmentX(0.5F);

        sensorCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        emulateBtn.setText("Emulate");
        emulateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emulateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPainLayout = new javax.swing.GroupLayout(mainPain);
        mainPain.setLayout(mainPainLayout);
        mainPainLayout.setHorizontalGroup(
            mainPainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPainLayout.createSequentialGroup()
                .addGroup(mainPainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPainLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(mainPainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sensorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(mainPainLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(emulateBtn)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        mainPainLayout.setVerticalGroup(
            mainPainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPainLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(66, 66, 66)
                .addComponent(sensorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(emulateBtn)
                .addGap(58, 58, 58))
        );

        getContentPane().add(mainPain, "card2");

        co2Slider.setMajorTickSpacing(1);
        co2Slider.setMaximum(10);
        co2Slider.setMinorTickSpacing(1);
        co2Slider.setPaintLabels(true);
        co2Slider.setPaintTicks(true);
        co2Slider.setSnapToTicks(true);
        co2Slider.setValue(2);

        alarmNameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        alarmNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alarmNameLabel.setText("jLabel2");

        jLabel3.setText("CO2 level");

        smokeSlider.setMajorTickSpacing(1);
        smokeSlider.setMaximum(10);
        smokeSlider.setMinorTickSpacing(1);
        smokeSlider.setPaintLabels(true);
        smokeSlider.setPaintTicks(true);
        smokeSlider.setSnapToTicks(true);
        smokeSlider.setValue(2);

        jLabel4.setText("Smoke level");
        jLabel4.setToolTipText("");

        activeStatusBtn.setText("On");
        activeStatusBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                activeStatusBtnItemStateChanged(evt);
            }
        });

        jLabel5.setText("Active status : ");

        activeStatusLabel.setText("On");

        javax.swing.GroupLayout alarmPaneLayout = new javax.swing.GroupLayout(alarmPane);
        alarmPane.setLayout(alarmPaneLayout);
        alarmPaneLayout.setHorizontalGroup(
            alarmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(alarmPaneLayout.createSequentialGroup()
                .addGroup(alarmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(alarmPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(alarmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alarmNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(co2Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(smokeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)))
                    .addGroup(alarmPaneLayout.createSequentialGroup()
                        .addGroup(alarmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(alarmPaneLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel3))
                            .addGroup(alarmPaneLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel4)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(alarmPaneLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(activeStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(activeStatusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        alarmPaneLayout.setVerticalGroup(
            alarmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alarmPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alarmNameLabel)
                .addGap(31, 31, 31)
                .addGroup(alarmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activeStatusBtn)
                    .addComponent(activeStatusLabel))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(co2Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(smokeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(alarmPane, "card3");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void emulateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emulateBtnActionPerformed
        // update the values with the new selected fire alarm
        selectedSensor = alarmList.get(sensorCombo.getSelectedIndex());
        populateEmulatePanel();
        scheduleStatusUpdate();
        mainPain.setVisible(false);
        alarmPane.setVisible(true);
    }//GEN-LAST:event_emulateBtnActionPerformed

    private void activeStatusBtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_activeStatusBtnItemStateChanged
        int newState = evt.getStateChange();
        // update the active status 
        if (newState == ItemEvent.SELECTED) {
            activeStatusBtn.setText("Turn off");
            activeStatusLabel.setText("ON");
            co2Slider.setEnabled(true);
            smokeSlider.setEnabled(true);
            selectedSensor.setIsActive(true);
        } else {
            activeStatusBtn.setText("Turn on");
            activeStatusLabel.setText("OFF");
            co2Slider.setEnabled(false);
            smokeSlider.setEnabled(false);
            selectedSensor.setIsActive(false);
        }
    }//GEN-LAST:event_activeStatusBtnItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton activeStatusBtn;
    private javax.swing.JLabel activeStatusLabel;
    private javax.swing.JLabel alarmNameLabel;
    private javax.swing.JPanel alarmPane;
    private javax.swing.JSlider co2Slider;
    private javax.swing.JButton emulateBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel mainPain;
    private javax.swing.JComboBox<String> sensorCombo;
    private javax.swing.JSlider smokeSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        updateStatus();
    }
}
