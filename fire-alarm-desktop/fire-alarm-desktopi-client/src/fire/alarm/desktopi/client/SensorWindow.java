/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fire.alarm.desktopi.client;

import firealarm.rmi.api.*;
import java.rmi.RemoteException;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author nuwan
 */
public class SensorWindow extends javax.swing.JFrame implements Runnable {
    
    private FireAlarmSensorService fireAlarmService;
    private UserService userService;
    
    private boolean hasAdmin = false;
    
    private String userAuthToken = null;

    /**
     * Creates new form SensorWindow
     */
    public SensorWindow(FireAlarmSensorService fireAlarmService, UserService userService) {
        initComponents();
        this.fireAlarmService = fireAlarmService;
        this.userService = userService;
        
        initLoginButton();
        
        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(this, 0, 5, TimeUnit.SECONDS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        userInfo = new javax.swing.JLabel();
        addFireAlarmBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sensorPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(850, 550));
        setResizable(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(800, 600));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        buttonPanel.setBackground(new java.awt.Color(153, 255, 255));

        loginButton.setText("Login");
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginButtonMouseClicked(evt);
            }
        });
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        userInfo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        userInfo.setText("Not logged in");

        addFireAlarmBtn.setText("Add fire alarm");
        addFireAlarmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFireAlarmBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Fire alarm sensors");

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addComponent(addFireAlarmBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                        .addComponent(userInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(loginButton)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFireAlarmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userInfo))
                .addGap(31, 31, 31))
        );

        jPanel1.add(buttonPanel);

        sensorPanel.setBackground(new java.awt.Color(204, 204, 255));
        sensorPanel.setToolTipText("");
        sensorPanel.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.add(sensorPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_loginButtonMouseClicked

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        handleLoginClicked();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void addFireAlarmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFireAlarmBtnActionPerformed
        if (userAuthToken == null) {
            // user not logged in
            // display error dialog
            new ErrorDialog(this, rootPaneCheckingEnabled, "Please login to create a fire alarm")
                    .setVisible(true);
            
        } else {
            
            FireAlarmDialog alarmDialog = new FireAlarmDialog(this, rootPaneCheckingEnabled, null);
            alarmDialog.setVisible(true);
            addFireAlarm(alarmDialog.getFloor(), alarmDialog.getRoom());
        }

    }//GEN-LAST:event_addFireAlarmBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFireAlarmBtn;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel sensorPanel;
    private javax.swing.JLabel userInfo;
    // End of variables declaration//GEN-END:variables

    private void fetchFireAlarms() {
        System.out.println("fetching fire alarms");
        try {
            List<FireAlarmSensor> sensors = fireAlarmService.getAllFireAlarms();
            
            sensorPanel.removeAll();
            
            for (FireAlarmSensor sensor : sensors) {
                SensorItem item = new SensorItem();
                item.setSensor(sensor);
                
                sensorPanel.add(item);
            }
            sensorPanel.repaint();
            sensorPanel.revalidate();
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void handleLoginClicked() {
        if (userAuthToken == null) {
            // not logged in
            // show login dialog          
            LoginDialog d;
            if (hasAdmin) {
                d = new LoginDialog(this, rootPaneCheckingEnabled, false);                
            } else {
                // sign up mode
                d = new LoginDialog(this, rootPaneCheckingEnabled, true);
            }
            
            d.setVisible(true);
            // after the dialog is closed
            if (d.getLoginClicked()) {
                if (hasAdmin) {
                    login(d.getEmail(), d.getPassword());
                    
                } else {
                    signUp(d.getEmail(), d.getPassword());
                }
                d.clearInputs();
            }
        } else {
            // logged in
            // so log out user
            userAuthToken = null;
            loginButton.setText("Login");
            userInfo.setText("Not logged in");
        }
    }
    
    private void login(String email, String password) {
        try {
            userAuthToken = userService.login(email, password);
            
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (userAuthToken != null) {
            loginButton.setText("Logout");
            userInfo.setText("User: " + email);
        } else {
            // display error dialog
            new ErrorDialog(this, rootPaneCheckingEnabled, "Failed to login. Please try again")
                    .setVisible(true);
            
        }
    }
    
    private void signUp(String email, String password) {
        try {
            boolean userCreated = userService.createAdmin(email, password);
            if (userCreated) {
                hasAdmin = true;
                loginButton.setText("Login");
                handleLoginClicked();
            } else {
                // display error dialog
                new ErrorDialog(this, rootPaneCheckingEnabled, "Failed to sign up. Please try again")
                        .setVisible(true);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addFireAlarm(String floor, String room) {
        try {
            FireAlarmSensor createdSensor = fireAlarmService.createFireAlarm(userAuthToken, floor, room);
            if (createdSensor != null) {
                fetchFireAlarms();
            } else {
                // display error dialog
                new ErrorDialog(this, rootPaneCheckingEnabled, "Failed to create fire alarm. Please try again")
                        .setVisible(true);
                
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initLoginButton() {
        try {
            hasAdmin = userService.hasAdmin();
            if (!hasAdmin) {
                loginButton.setText("Sign up");
            } 
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void run() {
        fetchFireAlarms();
    }
    
}
