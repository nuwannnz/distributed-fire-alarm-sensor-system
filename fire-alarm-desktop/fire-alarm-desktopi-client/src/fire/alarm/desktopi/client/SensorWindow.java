/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fire.alarm.desktopi.client;

import firealarm.rmi.api.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author nuwan
 */
public class SensorWindow extends javax.swing.JFrame implements Runnable {

    private FireAlarmSensorService fireAlarmService;
    private UserService userService;

    private boolean hasAdmin = false;
    private String userAuthToken = null;
    private List<FireAlarmSensor> sensorList;

    /**
     * Creates new form SensorWindow
     */
    public SensorWindow(FireAlarmSensorService fireAlarmService, UserService userService) {

        // draw the window 
        initComponents(); // auto generated method by Netbeans

        this.fireAlarmService = fireAlarmService;
        this.userService = userService;

        // initialize sensor list
        sensorList = new ArrayList<>();

        // initialize button labels
        initLoginButton();

        // schedule fetching of sensors to run every 30 seconds
        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(this, 0, 5, TimeUnit.SECONDS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        userInfo = new javax.swing.JLabel();
        addFireAlarmBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(850, 550));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        buttonPanel.setBackground(new java.awt.Color(204, 204, 204));

        loginButton.setText("Login");
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginButtonMouseClicked(evt);
            }
        });
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        userInfo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        userInfo.setText("Not logged in");

        addFireAlarmBtn.setText("Add fire alarm");
        addFireAlarmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFireAlarmBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Fire alarm sensors");

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addComponent(addFireAlarmBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 343, Short.MAX_VALUE)
                        .addComponent(userInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(loginButton)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFireAlarmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userInfo))
                .addGap(31, 31, 31))
        );

        jScrollPane1.setAutoscrolls(true);

        sensorPanel.setToolTipText("");
        sensorPanel.setAutoscrolls(true);
        sensorPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        sensorPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                sensorPanelComponentAdded(evt);
            }
        });
        sensorPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 10, 10));
        jScrollPane1.setViewportView(sensorPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_loginButtonMouseClicked

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        handleLoginClicked();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void addFireAlarmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFireAlarmBtnActionPerformed
        if (userAuthToken == null) {
            // user not logged in
            // display error dialog
            showErrorDialog("Please login to create a fire alarm");

        } else {
            // display fire alarm dialog
            FireAlarmDialog alarmDialog = new FireAlarmDialog(this, rootPaneCheckingEnabled, null);
            alarmDialog.setVisible(true);
            if (alarmDialog.getFormSubmitted()) {
                addFireAlarm(alarmDialog.getFloor(), alarmDialog.getRoom());
            }
        }

    }//GEN-LAST:event_addFireAlarmBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_formWindowOpened

    private void sensorPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_sensorPanelComponentAdded
        resizeSensorPanel();
    }//GEN-LAST:event_sensorPanelComponentAdded

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        resizeSensorPanel();
    }//GEN-LAST:event_formComponentResized

    private void resizeSensorPanel(){
         Dimension d = new Dimension();
        d.setSize(jScrollPane1.getSize().getWidth() - 20, sensorPanel.getHeight());
        sensorPanel.setPreferredSize(d);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFireAlarmBtn;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel sensorPanel;
    private javax.swing.JLabel userInfo;
    // End of variables declaration//GEN-END:variables

    /**
     * This method will fetch the fire alarms from the RMI server and add them
     * to the sensor list
     */
    private void fetchFireAlarms() {
        System.out.println("fetching fire alarms");
        try {
            List<FireAlarmSensor> sensors = fireAlarmService.getAllFireAlarms();

            sensorList.removeAll(sensorList);
            sensorList.addAll(sensors);

            populateSensorPanel();

        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method will clear the sensor panel and will populate it with the
     * current sensorList
     */
    private void populateSensorPanel() {
        // clear sensor panel
        sensorPanel.removeAll();

        for (FireAlarmSensor sensor : sensorList) {
            SensorItem item = new SensorItem();
            item.setSensor(sensor);

            // set a click listener for the edit button
            item.setOnEditClickListner(new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int clickedAlarmId = Integer.valueOf(e.getActionCommand());
                    SensorWindow.this.handleEditClicked(clickedAlarmId);
                }
            });

            // set a click listener for the delete button
            item.setOnDeleteClickListner(new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int clickedAlarmId = Integer.valueOf(e.getActionCommand());
                    SensorWindow.this.handleDeleteClicked(clickedAlarmId);
                }
            });

            // add item to the sensor panel
            sensorPanel.add(item);
        }

        // notify sensor panel
        sensorPanel.repaint();
        sensorPanel.revalidate();

        jScrollPane1.repaint();
        jScrollPane1.revalidate();
    }

    /**
     * This method will display the login form if the user is not logged in and
     * will logout the user otherwise
     */
    private void handleLoginClicked() {

        if (userAuthToken == null) {
            // not logged in
            // show login dialog          
            LoginDialog d;
            if (hasAdmin) {
                // login mode
                d = new LoginDialog(this, rootPaneCheckingEnabled, false);
            } else {
                // sign up mode
                d = new LoginDialog(this, rootPaneCheckingEnabled, true);
            }            
            d.setVisible(true);

            // check if user submitted the form or clicked cancel
            if (d.getLoginClicked()) {
                if (hasAdmin) {
                    login(d.getEmail(), d.getPassword());
                } else {
                    signUp(d.getEmail(), d.getPassword());
                }
            }
        } else {
            // logged in
            // so log out user
            userAuthToken = null;
            loginButton.setText("Login");
            userInfo.setText("Not logged in");
        }
    }

    private void handleEditClicked(int alarmId) {
        if (userAuthToken == null) {
            // not logged in
            showErrorDialog("Please log in to edit an alarm");
            return;
        }

        FireAlarmSensor sensorToUpdate = getFireAlarmById(alarmId);
        FireAlarmDialog d = new FireAlarmDialog(this, rootPaneCheckingEnabled, sensorToUpdate);
        d.setVisible(true);
        if(!d.getFormSubmitted()){
            return;
        }
        sensorToUpdate.setFloor(d.getFloor());
        sensorToUpdate.setRoom(d.getRoom());

        updateFireAlarm(sensorToUpdate);
    }

    private void handleDeleteClicked(int alarmId) {
        if (userAuthToken == null) {
            // not logged in
            showErrorDialog("Please log in to delete an alarm");
            return;
        }

        FireAlarmSensor sensorToDelete = getFireAlarmById(alarmId);

        int deleteConfirmResult = JOptionPane.showConfirmDialog(
                this,
                "Delete this fire alarm of "
                + sensorToDelete.getFloor()
                + " floor "
                + sensorToDelete.getRoom() + " room?");

        if (deleteConfirmResult == JOptionPane.YES_OPTION) {
            deleteFireAlarm(sensorToDelete);
        }
    }

    /**
     * This method will call the necessary RMI server methods to perform the
     * login
     *
     * @param email Email entered by the user
     * @param password Password entered by the user
     */
    private void login(String email, String password) {
        try {
            userAuthToken = userService.login(email, password);
            if (userAuthToken != null) {
                // login success
                loginButton.setText("Logout");
                userInfo.setText("User: " + email);
            } else {
                // login failed
                // display error dialog
                showErrorDialog("Failed to login. Please try again");

            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method will call the necessary RMI server methods to perform the
     * sign up
     *
     * @param email Email entered by the user
     * @param password Password entered by the user
     */
    private void signUp(String email, String password) {
        try {
            boolean userCreated = userService.createAdmin(email, password);
            if (userCreated) {
                // sign up success
                hasAdmin = true;
                loginButton.setText("Login");
                handleLoginClicked();
            } else {
                // sign up failed
                // display error dialog
                showErrorDialog("Failed to sign up. Please try again");

            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method will call the necessary RMI server methods to add a fire
     * alarm
     *
     * @param floor Floor entered by the user
     * @param room Room entered by the user
     */
    private void addFireAlarm(String floor, String room) {
        try {
            FireAlarmSensor createdSensor = fireAlarmService.createFireAlarm(userAuthToken, floor, room);
            if (createdSensor != null) {
                // fire alarm creation succeded
                // add fire alarm to the list
                sensorList.add(createdSensor);
                // update sensor panel
                populateSensorPanel();

            } else {
                // fire alarm creation failed
                // display error dialog
                showErrorDialog("Failed to create fire alarm. Please try again");

            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method will call the necessary RMI server methods to update a fire
     * alarm
     *
     * @param sensorToUpdate FireAlarm clicked by the user
     */
    private void updateFireAlarm(FireAlarmSensor sensorToUpdate) {

        try {
            FireAlarmSensor updatedSensor = fireAlarmService.updateFireAlarm(
                    userAuthToken,
                    sensorToUpdate);

            if (updatedSensor == null) {
                // fire alarm update failed
                showErrorDialog("Failed to update fire alarm. Please try again");
            } else {
                // fire alarm update succeeded
                int indexOfOldSensor = sensorList.indexOf(sensorToUpdate);
                if (indexOfOldSensor == -1) {
                    // sensor list has already updated
                    return;
                }
                // replace the old fire alarm sensor with the new one
                sensorList.set(indexOfOldSensor, updatedSensor);

                // update the sensor panel
                populateSensorPanel();
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method will call the necessary RMI server methods to delete a fire
     * alarm
     *
     * @param alarmToDelete Fire alarm clicked by the user
     */
    private void deleteFireAlarm(FireAlarmSensor alarmToDelete) {

        try {
            boolean deleted = fireAlarmService.deleteFireAlarm(userAuthToken, alarmToDelete.getId());
            if (deleted) {
                // deletion sucessful 
                // update sensorList
                int indexOfDeletedAlarm = sensorList.indexOf(alarmToDelete);
                if (indexOfDeletedAlarm == -1) {
                    // fire alarm already removed from the list
                }
                // remove sensor from the sensorList
                sensorList.remove(indexOfDeletedAlarm);

                // update sensor panel
                populateSensorPanel();

            } else {
                // failed to delete
                showErrorDialog("Failed to delete the fire alarm. Please try again later");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method will update the label of the login button based on whether
     * there is a registered administrator account
     */
    private void initLoginButton() {
        try {
            hasAdmin = userService.hasAdmin();
            if (!hasAdmin) {
                loginButton.setText("Sign up");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SensorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method will display a dialog with the given message and a OK button
     *
     * @param msg Message to display in the dialog
     */
    private void showErrorDialog(String msg) {
                JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
    }

    private FireAlarmSensor getFireAlarmById(int id) {
        FireAlarmSensor sensor = null;
        for (FireAlarmSensor fireAlarmSensor : sensorList) {
            if (fireAlarmSensor.getId() == id) {
                sensor = fireAlarmSensor;
                break;
            }
        }
        return sensor;
    }

    // implemented method of the Runnable interface
    @Override
    public void run() {
        fetchFireAlarms();
    }

    public void forceFetch() {
        fetchFireAlarms();
    }

}
